{
  "name": "dejavu-optimizer",
  "description": "The dejavu optimizer",
  "keywords": [
    "oop",
    "interface",
    "class",
    "abstract",
    "final",
    "inheritance",
    "optimizer"
  ],
  "version": "0.4.0",
  "author": {
    "name": "IndigoUnited",
    "email": "hello@indigounited.com",
    "url": "http://indigounited.com"
  },
  "main": "index.js",
  "dependencies": {
    "commander": "~1.1.1",
    "esprima": "~1.0.2",
    "escodegen": "~0.0.15",
    "glob": "~3.1.14",
    "async": "~0.2.6",
    "mkdirp": "~0.3.5",
    "mout": "~0.4.0"
  },
  "bugs": {
    "url": "https://github.com/IndigoUnited/dejavu-optimizer/issues/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/IndigoUnited/dejavu-optimizer.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "engine": "node >= 0.8.x",
  "readme": "dejavu optimizer\n------\n\nThe `dejavu` optimizer analyzes your code, making [dejavu](https://github.com/IndigoUnited/dejavu) usages faster.   \nBenchmarks: [jsperf](http://jsperf.com/oop-benchmark/107)\n\n\n\n# What it does?\n\n- Improves `$super()`, `$self` and `$static` usage\n- Removes the need for wrappers, improving performance by a great margin\n- Removes abstract functions from abstract classes\n- Removes functions from interfaces\n- Removes all `$locked` and `$member()` because they are not used in the loose version\n\n\n# Usage\n\n## Node script\n\nThere's a simple `nodejs` script located in the `bin` folder.\nIf you are optimizing your code for `nodejs` then pass the `--closure` option. This will boost the performance when running code in v8.\nPlease look at the jsperf results to see the difference in the different browsers.\n\nExample usage:\n\n`node optimizer < file_in.js > file_out.js`\n`node optimizer --closure < file_in.js > file_out.closure.js`\n\n\n## Programmatic\n\nTo use the `optimizer` programatically, please check `bin/optimizer` for an example.\n\n\n## Tasks\n\n`dejavu` comes with an `automaton` and `grunt` task.\n\nSample usage of `automaton`:\n\n```js\nvar dejavuOptimizer = require('dejavu/tasks/optimizer.autofile');\n\nmodule.exports = function (task) {\n    task.do(dejavuOptimizer, {\n        description: 'Optimize myfile',\n        options: {\n            closure: true, // defaults to false\n            files: {\n                'src/myfile.js': 'dst/myfile.opt.js'\n            }\n        }\n    });\n}\n```\n\nSample usage of `grunt`:\n\n```js\ngrunt.loadNpmTasks('dejavu');\n\ngrunt.initConfig({\n    dejavuopt: {\n        sometarget: {\n            closure: true, // defaults to false\n            files: {\n                'dst/myfile.opt.js': 'src/myfile.js'\n            }\n        }\n    }\n});\n```\n\n\n## License ##\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).",
  "readmeFilename": "README.md",
  "_id": "dejavu-optimizer@0.4.0",
  "dist": {
    "shasum": "b3021b570d3867a8676655fc4a57e1a17d39f045"
  },
  "_from": "dejavu-optimizer@",
  "_resolved": "http://registry.npmjs.org/dejavu-optimizer/-/dejavu-optimizer-0.4.0.tgz"
}
