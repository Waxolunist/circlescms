{
  "name": "jsface",
  "main": "jsface.js",
  "description": "Small, fast, elegant, powerful, and cross platform JavaScript OOP library. Support singleton, super call, private, mixins, plugins, AOP and more.",
  "author": {
    "name": "Tan Nhu",
    "email": "tnhu AT me . com"
  },
  "version": "2.1.1",
  "keywords": [
    "jsface",
    "JSFace",
    "OOP",
    "JavaScript OOP",
    "JavaScript Object Oriented Programming",
    "AOP",
    "Aspect Oriented Programming"
  ],
  "homepage": "https://github.com/tnhu/jsface",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/tnhu/jsface/blob/master/LICENSE.txt"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/tnhu/jsface.git"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "dependencies": {},
  "devDependencies": {},
  "readme": "![Benchmark result](https://lh5.googleusercontent.com/-2dQo8ttjn48/T2KVyppgd2I/AAAAAAAADQw/GvEpE5MIYUo/s956/Screen%2520Shot%25202012-03-15%2520at%25206.21.04%2520PM.png \"Benchmark\")\n\n[![Build Status](https://secure.travis-ci.org/tannhu/jsface.png?branch=master)](http://travis-ci.org/tannhu/jsface)\n# Features\n\n* Small footprint, no dependency, 0.7K minimized+gzip!\n* Super fast! See [benchmark](http://jsperf.com/oop-benchmark/6).\n* Work on both server and client side.\n* Support CommonJS.\n* Support main, singleton, mixin, private properties, Aspect Oriented Programming.\n* Plugins mechanism to extend itself.\n\n# Setup\n\nJSFace supports both server side (CommonJS) and client side JavaScript (browser).\n\nBrowser:\n\n``` html\n<script src=\"jsface.js\" type=\"text/javascript\"></script>\n```\n\nJSFace introduces two variables in browser global scope: jsface and Class. In case you want to use other APIs such as extend, you need to create aliases, for example:\n\n``` javascript\nvar extend = jsface.extend;\n```\n\nIn NodeJS environment, first install JSFace via npm:\n\n``` sh\nnpm install jsface\n```\n\nThen use its APIs, for example:\n\n``` javascript\nvar jsface = require(\"jsface\"),\n    Class  = jsface.Class,\n    extend = jsface.extend;\n```\n\n# API\n\n## Define a class\n\n``` javascript\nvar Person = Class({\n  constructor: function(name, age) {\n    this.name = name;\n    this.age  = age;\n  },\n\n  toString: function() {\n    return this.name + \"/\" + this.age;\n  }\n});\n\nvar person = new Person(\"Rika\", 20);\nperson.toString();                               // \"Rika/20\"\n```\n\n## Define a sub-class\n\n``` javascript\nvar Student = Class(Person, {\n  constructor: function(id, name, age) {\n    this.id = id;\n    Student.$super.call(this, name, age);        // Invoke parent's constructor\n    // this.$super(name, age);                   // This api is removed since v2.1.0\n  },\n\n  toString: function() {\n    return this.id + \"/\" + Student.$superp.toString.call(this); // Invoke parent's toString method\n    // return this.id + \"/\" + this.$super();                    // This api is removed since v2.1.0\n  }\n});\n\nvar student = new Student(1, \"Rika\", 20);\nstudent.toString();                              // \"1/Rika/20\"\n```\n\n## main\n\nJSFace supports a special method named main(). It works just similar to Java's main method.\n\n``` javascript\nClass({\n  constructor: function(name) {\n    this.name = name;\n  },\n\n  getName: function() {\n    return this.name;\n  },\n\n  main: function(Person) {                       // Class is passed to main() as its first argument\n    var p = new Person(\"Rika\");\n\n    p.getName();                                 // \"Rika\"\n  }\n});\n```\n\n## Singleton class\n\n``` javascript\nvar Util = Class({\n  $singleton: true,\n\n  echo: function(obj) {\n    return obj;\n  }\n});\n\nUtil.echo(2012);                                 // 2012\n```\n\n## Static properties\n\nJSFace supports Java-style static properties. Meaning they are accessible on both class and instance levels.\n\n``` javascript\nvar Person = Class({\n  $statics: {\n    MIN_AGE:   1,\n    MAX_AGE: 150,\n\n    isValidAge: function(age) {\n      return age >= this.MIN_AGE && age <= this.MAX_AGE;\n    }\n  },\n\n  constructor: function(name, age) {\n    this.name = name;\n    this.age  = age;\n  }\n});\n\nvar person = new Person(\"Rika\", 20);\n\nPerson.MIN_AGE === person.MIN_AGE;               // true\nPerson.MAX_AGE === person.MAX_AGE;               // true\nPerson.isValidAge(0);                            // false\nperson.isValidAge(person.age);                   // true\n```\n\n## Private properties\n\nJSFace supports private static properties, meaning the properties are shared over instances.\n\n``` javascript\nvar Person = Class(function() {\n  var MIN_AGE =   1,                             // private variables\n      MAX_AGE = 150;\n\n  function isValidAge(age) {                     // private method\n    return age >= MIN_AGE && age <= MAX_AGE;\n  }\n\n  return {\n    constructor: function(name, age) {\n      if ( !isValidAge(age)) {\n        throw \"Invalid parameter\";\n      }\n\n      this.name = name;\n      this.age  = age;\n    }\n  };\n});\n```\n\n## Mixins\n\nJSFace provides a powerful mechanism to support mixins. Reusable code can be mixed into almost anything.\n\nMixin can be bound when you define classes:\n\n``` javascript\nvar Options = Class({\n  setOptions: function(opts) {\n    this.opts = opts;\n  }\n});\n\nvar Events = Class({\n  bind: function(event, fn) {\n    return true;\n  },\n  unbind: function(event, fn) {\n    return false;\n  }\n});\n\nvar Person = Class({\n  constructor: function(name, age) {\n    this.name = name;\n    this.age  = age;\n  }\n});\n\n// Student inherits Person and extends properties from Options and Events\nvar Student = Class([ Person, Options, Events ], {\n  constructor: function(id, name, age) {}\n});\n\nvar student = new Student(1, \"Rika\", 20);\nstudent.setOptions({ foo: true });               // student.opts === { foo: true }\nstudent.bind();                                  // true\nstudent.unbind();                                // false\n```\n\nOr after defining classes:\n\n``` javascript\nvar Student = Class(Person, {\n  constructor: function(id, name, age) {\n});\n\nextend(Student, [ Options, Events ]);\n```\n\nMixin with instance:\n\n``` javascript\nvar person = new Person(\"Rika\", 20);\n\nextend(person, Options);\nperson.setOptions({ foo: true });\n```\n Mixin with native classes:\n\n``` javascript\nextend(String.prototype, {\n  trim: function() {\n    return this.replace(/^\\s+|\\s+$/g, \"\");\n  }\n});\n\n\"   Hello World    \".trim();                     // \"Hello World\"\n```\n## No conflict\n\nIn browser environment, you might be using another library which also introduces the global namespace Class. JSFace can return the original Class back to the library claims it with a call to jsface.noConflict().\n\n``` javascript\njsface.noConflict();\n\n// Code that uses other library's Class can follow here\n```\n\nActually, Class is an alias of jsface.Class:\n\n``` javascript\njsface.noConflict();\n\n// Code that uses other library's Class can follow here\n\n// Define classes by using jsface.Class directly\nvar Person = jsface.Class({\n});\n```\n\n# Plugins\n\n## Plug and Play pointcut\n\nJSFace supports Aspect Oriented Programming (AOP) via simple before/after mechanism. You can apply pointcuts over class constructors, class methods, singleton methods, instance methods. You can even apply pointcuts over native classes.\n\nAOP support is implemented as a standalone plugin.\n\n### Setup\n\nBrowser:\n\n``` html\n<script src=\"jsface.pointcut.js\" type=\"text/javascript\"></script>\n```\n\nthen in your code, make an alias to jsface.pointcut:\n\n``` javascript\nvar pointcut = jsface.pointcut;\n```\n\nNodeJS:\n\n``` javascript\nvar pointcut = require(\"jsface.pointcut\");\n```\n\n### Applying pointcuts\n\nIn JSFace, an advisor is a set of pointcuts you want to apply to a subject. You can apply as many advisors as you want.\n\n``` javascript\nPerson = Class({\n  constructor: function(name) {\n    this.name    = name;\n    this.counter = 0;\n  },\n  foo: function(n) {\n  },\n  bar: function(n) {\n  }\n});\n\nvar advisor = {\n  constructor: {\n    before: function() {\n      this.age = 20;\n    },\n    after: function() {\n      this.email = \"rika@sample.com\";\n    }\n  },\n  foo: function(n) {                             // sugar syntax, foo:before\n    this.counter++;\n  },\n  bar: {\n    before: function(n) {\n      this.counter++;\n    },\n    after: function(n) {\n      this.counter++;\n    }\n  }\n};\n\nPerson = pointcut(Person, advisor);\n\nvar person = new Person(\"Rika\");\n\nperson.foo();\nperson.bar();\n\nperson.name    === \"Rika\";                       // true\nperson.age     === 20;                           // true\nperson.email   === \"rika@sample.com\";            // true\nperson.counter === 3;                            // true\n```\n\n### Removing pointcuts\n\nUsing previous apply pointcut example:\n\n``` javascript\n// remove all pointcuts bound to constructor and foo\nPerson = poincut(Person, \"remove constructor foo\");\n\n// remove advisor, other advisors remained\nPerson = poincut(Person, \"remove\", advisor);\n\n// remove all advisors, restore the fresh version of Person\nPerson = poincut(Person, \"remove\");\n```\n\n## $ready\n\n$ready plugin is designed to help parent classes to intercept their subclasses' creation. If a class uses $ready,\nit notifies itself.\n\n### Setup\n\nBrowser:\n\n``` html\n<script src=\"jsface.ready.js\" type=\"text/javascript\"></script>\n```\n\nNodeJS:\n\n``` javascript\nvar ready = require(\"jsface.ready\");\n```\n\n### Sample\n\n``` javascript\nvar Service = Class({\n  $ready: function(clazz, api, parent) {\n    var type = (this !== clazz) && api.type;\n\n    switch (type) {\n      case \"session\":\n        // do something with subclass clazz when its type is session\n        break;\n      case \"application\":\n        // do something with subclass clazz when its type is application\n        break;\n    }\n  }\n});\n\nvar SessionService = Class(Service, {\n  type: \"session\"\n});\n\nvar ApplicationService = Class(Service, {\n  type: \"application\"\n});\n```\n\n# Bug tracker\n\nHave a bug? Please [create an issue here](https://github.com/tannhu/jsface/issues) on GitHub!\n\n# Some notes\n\nMethod overloadings, type checking, and arguments validation (available in versions prior to 2.0.0) are being implemented as plugins.\n\nMore use cases are covered in [unit tests](https://github.com/tannhu/jsface/tree/master/test)\n(I'm using [QUnit](https://github.com/jquery/qunit)).\n\n# License\n\nCopyright (c) 2009-2012 Tan Nhu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "jsface@2.1.1",
  "dist": {
    "shasum": "992c58e7a10842a59c92e0caf20062ef6db40074"
  },
  "_from": "jsface@",
  "_resolved": "http://registry.npmjs.org/jsface/-/jsface-2.1.1.tgz"
}
