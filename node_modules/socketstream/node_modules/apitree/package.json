{
  "author": {
    "name": "Andrey Tarantsov",
    "email": "andreyvit@me.com"
  },
  "name": "apitree",
  "description": "Creates a SocketStream-style API tree from a file system directory",
  "version": "1.1.0",
  "homepage": "https://github.com/andreyvit/apitree.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/andreyvit/apitree.js.git"
  },
  "bugs": "http://github.com/andreyvit/apitree.js/issues",
  "main": "lib/apitree.js",
  "directories": {
    "lib": "lib",
    "example": "example"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "~1.0",
    "coffee-script": "~1.3"
  },
  "readme": "apitree.js\n===========\n\nNode.js module to create a SocketStream-style API tree from a file system directory.\n\n\nInstallation\n------------\n\n    npm install apitree\n\n\nUsage\n-----\n\nCall `createApiTree` to load all files in the given directory (and its subdirectories) and return an object, such that `returnedObject.foo.bar.boz.fubar` equals to exported function `fubar` of file `boz` in subdirectory `foo/bar` of the given directory. (Some of the described details are customizable via optional callbacks.)\n\nExample:\n\n    var apitree = require('apitree');\n    var path    = require('path');\n\n    var api = apitree.createApiTree(path.join(__dirname, 'apiroot'))\n\n    api.somefile.func1(42);\n    api.sub.folder.anotherfile.func2(24);\n\ncreateApiTree function accepts 2 arguments:\n\n    apitree.createApiTree(directory, options)\n\nwhere options is an optional object with 3 possible keys:\n\n* `options.loadItem(path)` loads the contents of file at `path`; returns either `null` or an object that will be merged into the tree; the default value is `require`.\n* `options.filter(name, names)` determines whether given file should be processed or ignored; other names from the same directory are provided as the second argument; the default implementation returns true for .js files and files with a registered extension in require.extensions which don't have corresponding .js files. (Exludes .json files)\n* `options.nameToKey(name)` returns a key to use in the tree object for the given file or folder name; the default implementation strips the file extension and replaces any non-identifier characters with underscores.\n\nAdditionally, `options.readdirSync(directory)` and `options.isDirectory(path)` can be provided to override the standard behavior of reading from the file system.\n\n\nSomewhat more realistic example\n-------------------------------\n\nSee example/ directory. In CoffeeScript:\n\n    global.DB =\n      put: (collection, object) ->\n        @[collection].push object\n        console.log \"Added to #{collection}: #{JSON.stringify(object)}\"\n\n    path = require 'path'\n    global.S = require('apitree').createApiTree(path.join(__dirname, 'server'))\n\n    S.app.init()\n    userId = S.users.create(name: 'admin', password: 'admin123')\n    postId = S.blog.posts.publish(authorId: userId, title: \"Hello!\", body: \"Hey! This is my first post.\")\n    S.blog.comments.publish(postId: postId, author: \"Random Visitor\", body: \"Very excited about your new blog.\")\n    S.blog.comments.publish(postId: postId, author: \"spa.m@mer.go.ddam.it\", body: \"Send Your Name, Address...\")\n\nexample/server/app.coffee:\n\n    exports.init = ->\n      DB.users    = []\n      DB.posts    = []\n      DB.comments = []\n\nexample/server/users.coffee:\n\n    exports.create = ({ name, password }) ->\n      user = { name, password, id: DB.users.length }\n      DB.put 'users', user\n      user.id\n\nexample/server/blog/posts.coffee:\n\n    exports.publish = ({authorId, title, body}) ->\n      post = { authorId, title, body, id: DB.posts.length }\n      DB.put 'posts', post\n      post.id\n\nexample/server/blog/comments.coffee:\n\n    exports.publish = ({postId, author, body}) ->\n      comment = { postId, author, body, id: DB.comments.length }\n      DB.put 'comments', comment\n      comment.id\n\n\nSpec\n----\n\nUses mocha, run `npm test` to execute tests.\n\n    API tree\n        when given an empty folder\n          ✓ should return an empty tree\n        when given a folder with a single file\n          ✓ should put the file node under the tree root\n          ✓ should strip the extension when naming the tree node\n          ✓ should put the file's contents under its node\n        when given a file and a subfolder\n          ✓ should put the file and subfolder nodes together under the tree root\n        when given a file and a subfolder which have the same name after stripping extensions\n          ✓ should merge the file and the subfolder into a single node under the tree root\n        when given a folder hierarchy with nested subfolders\n          ✓ should reproduce the folder hierarachy inside the API tree\n        loadItem callback\n          ✓ should be used to obtain file contents\n        nameToKey callback\n          ✓ should accept file name as the only argument\n          ✓ should be used to translate file names into tree keys\n          ✓ should be used to translate subfolder names into tree keys\n          ✓ should not be used to modify keys returned by loadItem\n        default nameToKey callback\n          ✓ should strip file extension\n          ✓ should replace any non-identifier characters with underscores\n          ✓ should replace runs of multiple non-identifier characters with a single underscore\n        filter callback\n          ✓ should accept file name as the first argument\n          ✓ should accept the list of all file names in the same folder as the second argument\n          ✓ should be used to choose which files to process\n          ✓ should have no effect on which folders are processed\n        default filter callback\n          ✓ should include .js files\n          ✓ should include .coffee files that don't have corresponding .js files\n          ✓ should include registered extension files that don't have corresponding .js files\n          ✓ should only include .js file when both .js and .coffee files exist\n          ✓ should only include .js file when both registered extension file and .js files exist\n          ✓ should not include any other files\n\n    ✔ 25 tests complete (47ms)\n\n\nLicense\n-------\n\nMIT license. Copyright 2011–2012, [Andrey Tarantsov](andrey@tarantsov.com).\n",
  "readmeFilename": "README.md",
  "_id": "apitree@1.1.0",
  "dist": {
    "shasum": "ddfcfa3f2c99174f41c53e6373f369629fada343"
  },
  "_from": "apitree@= 1.1.0",
  "_resolved": "https://registry.npmjs.org/apitree/-/apitree-1.1.0.tgz"
}
