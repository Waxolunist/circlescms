{
  "name": "filecache",
  "version": "0.2.1",
  "description": "Simple in-memory file cache.",
  "author": {
    "name": "Oliver Leics",
    "email": "oliver.leics@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/oleics/node-filecache.git"
  },
  "bugs": {
    "url": "https://github.com/oleics/node-filecache/issues"
  },
  "keywords": [
    "cache",
    "memory",
    "file",
    "filecache",
    "inmemory"
  ],
  "main": "./index.js",
  "bin": {},
  "directories": {},
  "engines": {
    "node": ">= 0.6.0"
  },
  "dependencies": {
    "mime": "~1.2.5"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "readme": "\nFilecache\n=========\n\n### Simple in-memory filecache for node.js\n\nSee [server.js](https://github.com/oleics/node-filecache/tree/master/examples/server.js)\nin the examples directory for a ultra lightweight and lightning\nfast node.js http webserver serving static files.\n\nInstallation\n------------\n\n``npm install filecache``\n\nUsage Examples\n--------------\n\nSimple:\n\n```js\nvar filecache = require('filecache')\n\n// Create a cache with every file below 'path/to/dir'\nfilecache('path/to/dir', function(err, cache) {\n  // cache is a object with relative paths as its keys\n  console.log(cache['/some/file.txt'])\n})\n```\n\nAdvanced:\n\n```js\nvar filecache = require('filecache')\n\n// Create a new in-memory filecache\nvar fc = filecache()\n\n// Set some defaults\nfc.options\n( { watchDirectoryChanges: true\n  , watchFileChanges: false\n  , hashAlgo: 'sha1'\n  , gzip: true\n  , deflate: true\n  }\n)\n\n// Get notifyed when a change occured\nfc.on('change', function(d) {\n  console.log('! file changed')\n  console.log('     full path: %s', d.p)\n  console.log(' relative path: %s', d.k)\n  console.log('        length: %s bytes', d.length)\n  console.log('                %s bytes (gzip)', d.gzip.length)\n  console.log('                %s bytes (deflate)', d.deflate.length)\n  console.log('     mime-type: %s', d.mime_type)\n  console.log('         mtime: %s', d.mtime.toUTCString())\n})\n\n// Create a cache with every file below 'path/to/dir'\nfc.load('path/to/dir', function(err, cache) {\n  // cache is an object with relative paths as its keys\n  console.log(cache['/some/file.txt'])\n})\n\n// Create a cache for a specific file\nfc.load('path/to/file', function(err, cache) {\n  console.log(cache['/file'])\n})\n```\n\nSee [server.js](https://github.com/oleics/node-filecache/tree/master/examples/server.js)\nin the examples directory for a ultra lightweight and lightning\nfast node.js http webserver serving static files.\n\nOptions\n-------\n\n``prefix`` (default: null)  \nPrepend this string to the keys of the cache.\n\n``watchDirectoryChanges`` (default: false)  \nAutomatic reload of files within a directory.\n\n``watchFileChanges`` (default: false)  \nAutomatic reload of a changed file.\n\n``hashAlgo`` (default: false)  \nAlgorithm to use for hashsum.\n\n``gzip`` (default: false)  \ngzip-encode the file-contents.\n\n``deflate`` (default: false)  \ndeflate-encode the file-contents.\n\nAPI\n---\n\n``.load(path [, options] [, callback])``  \nLoads ``path`` into the filecache. ``path`` can be a file or a\ndirectory.\n\n``.httpHandler([options])``  \nReturns a handler for http-requests: handler(req, res [, next])  \nThe options for ``.httpHandler([options])`` are:\n\n```js\nvar options =\n    { etag:    true\n    , lastmod: true\n    , expires: 3600000 // milliseconds\n    , maxAge:  3600    // seconds\n    }\n```\n\nMIT License\n-----------\n\nCopyright (c) 2012 Oliver Leics <oliver.leics@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "filecache@0.2.1",
  "dist": {
    "shasum": "57b61d59d3f6f455fb479f9fdad2bb13cdec8bae"
  },
  "_from": "filecache@",
  "_resolved": "https://registry.npmjs.org/filecache/-/filecache-0.2.1.tgz"
}
